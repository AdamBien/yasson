/*******************************************************************************
 * Copyright (c) 2015, 2016 Oracle and/or its affiliates. All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0
 * which accompanies this distribution.
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *     Dmitry Kornilov - initial implementation
 ******************************************************************************/
apply plugin: 'java'
apply plugin: "maven"
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'findbugs'

group = "org.eclipse"
version = "1.0.0-M1"

jar {
    name = "yasson"
    archivesBaseName = "yasson"
    version =  '1.0.0-M1'
}

def defaultEncoding = 'UTF-8'
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = defaultEncoding
    compileTestJava {
        options.encoding = defaultEncoding
    }
}

sourceSets {
    test {
        resources.srcDir 'src/main/resources'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://maven.java.net/content/repositories/snapshots/"
    }
}

dependencies {
    compile 'javax.json.bind:javax.json.bind-api:1.0-SNAPSHOT'
    compile 'javax.json:javax.json-api:1.1.0-SNAPSHOT'
    compile 'javax.enterprise:cdi-api:1.2'

    testRuntime 'org.glassfish:javax.json:1.1.0-SNAPSHOT'

    testCompile 'junit:junit:4.12'
    testCompile 'org.jboss.weld:weld-core:2.3.3.Final';
    testCompile 'org.jboss.weld.se:weld-se:2.3.3.Final';
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

/**
 * Uploads Yasson to repo.eclipse.org:
 * use ./gradlew upload -PdeployEclipse
 */
if (project.hasProperty("deployEclipse")) {
    uploadArchives {
        repositories {
            mavenDeployer {
                // beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://repo.eclipse.org/content/repositories/yasson-releases/") {
                    authentication(userName: eclipseRepoUsername, password: eclipseRepoPassword)
                }

                snapshotRepository(url: "https://repo.eclipse.org/content/repositories/yasson-snapshots/") {
                    authentication(userName: eclipseRepoUsername, password: eclipseRepoPassword)
                }

                pom.project {
                    name 'yasson'
                    packaging 'jar'
                    description 'Eclipse Yasson. Reference implementation of JSR-367 (JSON-B).'
                    url 'https://projects.eclipse.org/projects/rt.yasson'

                    scm {
                        connection 'scm:git://git@github.com:eclipse/yasson.git'
                        developerConnection 'scm:ssh://git@github.com:eclipse/yasson.git'
                        url 'https://github.com/eclipse/yasson.git'
                    }

                    licenses {
                        license {
                            name 'Eclipse Public License v1.0 and Eclipse Distribution License v1.0'
                            url 'http://www.eclipse.org/legal/epl-v10.html'
                        }
                    }

                    developers {
                        developer {
                            name 'Yasson committers'
                            email 'yasson-dev@eclipse.org'
                        }
                    }
                }
            }
        }
    }
}

/**
 * Configure Findbugs plugin and make it disable on normal build process. The Findbug plugin introduces two tasks to run
 * the inspections for the main sources or tests. To call them, we can just run following tasks directly:
 *
 * findbugsMain: runs the inspections for the main sources (e.g. ./gradlew findbugsMain)
 * findbugsTest: runs the inspections for the test sources (e.g. ./gradlew findbugsTest)
 */
findbugs {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    toolVersion = "3.0.1"
    //  Empty sourceSets prevents the findbugs to be run as part of default build life cycle, but it still works by
    //  calling its corresponding tasks (findbugsMain and findbugsTest) directly
    sourceSets = []
}